using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

public class Strategy
{
    public required string CciIndicator1 { get; set; }
    public required string CciIndicator2 { get; set; }
    public required string MacdIndicator1 { get; set; }
    public required string MacdIndicator2 { get; set; }
    public required string AtrIndicator { get; set; }
    public double Cci1Threshold { get; set; }
    public double Cci2Threshold { get; set; }
    public double Macd1Threshold { get; set; }
    public double Macd2Threshold { get; set; }
    public required string Cci1Operator { get; set; }
    public required string Cci2Operator { get; set; }
    public required string Macd1Operator { get; set; }
    public required string Macd2Operator { get; set; }
    public double TrailStopMultiplier { get; set; }
    public double ProfitTargetMultiplier { get; set; }
}

public class IndicatorInfo
{
    public required string Name { get; set; }
    public int Index { get; set; }
}

public class DefaultSettings
{
    public Strategy AboveEmaLong { get; }
    public Strategy AboveEmaShort { get; }
    public Strategy BelowEmaLong { get; }
    public Strategy BelowEmaShort { get; }

    public DefaultSettings()
    {
        AboveEmaLong = new Strategy
        {
            CciIndicator1 = "CCI20",
            CciIndicator2 = "CCI50",
            MacdIndicator1 = "MACD_12_26_9",
            MacdIndicator2 = "MACD_19_39_9",
            AtrIndicator = "ATR_10",
            Cci1Threshold = 100,
            Cci2Threshold = 150,
            Macd1Threshold = 0.05,
            Macd2Threshold = 0.1,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 1.0,
            ProfitTargetMultiplier = 2.0
        };

        AboveEmaShort = new Strategy
        {
            CciIndicator1 = "CCI20",
            CciIndicator2 = "CCI50",
            MacdIndicator1 = "MACD_12_26_9",
            MacdIndicator2 = "MACD_19_39_9",
            AtrIndicator = "ATR_10",
            Cci1Threshold = -100,
            Cci2Threshold = -150,
            Macd1Threshold = -0.05,
            Macd2Threshold = -0.1,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 1.0,
            ProfitTargetMultiplier = 2.0
        };

        BelowEmaLong = new Strategy
        {
            CciIndicator1 = "CCI20",
            CciIndicator2 = "CCI50",
            MacdIndicator1 = "MACD_12_26_9",
            MacdIndicator2 = "MACD_19_39_9",
            AtrIndicator = "ATR_10",
            Cci1Threshold = 50,
            Cci2Threshold = 75,
            Macd1Threshold = 0.03,
            Macd2Threshold = 0.06,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 1.0,
            ProfitTargetMultiplier = 2.0
        };

        BelowEmaShort = new Strategy
        {
            CciIndicator1 = "CCI20",
            CciIndicator2 = "CCI50",
            MacdIndicator1 = "MACD_12_26_9",
            MacdIndicator2 = "MACD_19_39_9",
            AtrIndicator = "ATR_10",
            Cci1Threshold = -50,
            Cci2Threshold = -75,
            Macd1Threshold = -0.03,
            Macd2Threshold = -0.06,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 1.0,
            ProfitTargetMultiplier = 2.0
        };
    }
}

public class SimpleDailyBacktest
{
    public static void Main()
    {
        var defaults = new DefaultSettings();
        Console.WriteLine("Use default settings? (YES/NO):");
        bool useDefaults = Console.ReadLine()?.Trim().ToUpper() == "YES";

        string[] headers = File.ReadLines("BacktestData.csv").First().Split(',');
        int emaColumnIndex = Array.FindIndex(headers, h => h.Contains("EMA200"));

        var cciColumns = GetIndicatorColumns(headers, "CCI");
        var macdColumns = GetIndicatorColumns(headers, "MACD").Where(x => x.Name.EndsWith("_line")).ToList();

        var bestResult = RunBacktest(useDefaults, defaults, headers, emaColumnIndex, cciColumns, macdColumns);

        bestResult.ResultLines.AddRange(GenerateBestStrategyOutput(
            bestResult.BestAboveEmaLong,
            bestResult.BestAboveEmaShort,
            bestResult.BestBelowEmaLong,
            bestResult.BestBelowEmaShort));

        File.WriteAllLines("DailyProfitResults.txt", bestResult.ResultLines);

        Console.WriteLine($"Results saved to DailyProfitResults.txt");
        Console.WriteLine("Press any key to exit...");
        Console.ReadKey();
    }

    private static (double Profit, List<string> ResultLines, Strategy BestAboveEmaLong,
Strategy BestAboveEmaShort, Strategy BestBelowEmaLong, Strategy BestBelowEmaShort)
RunBacktest(bool useDefaults, DefaultSettings defaults, string[] headers,
int emaColumnIndex, List<IndicatorInfo> cciColumns, List<IndicatorInfo> macdColumns)
    {
        if (useDefaults)
        {
            var result = PerformBacktest("BacktestData.csv", headers, emaColumnIndex,
                defaults.AboveEmaLong, defaults.AboveEmaShort,
                defaults.BelowEmaLong, defaults.BelowEmaShort);

            return (result.Profit, result.ResultLines,
                defaults.AboveEmaLong, defaults.AboveEmaShort,
                defaults.BelowEmaLong, defaults.BelowEmaShort);
        }

        var random = new Random();
        double bestProfit = double.MinValue;
        var bestResult = (Profit: 0.0, ResultLines: new List<string>());
        var bestStrategies = (AboveEmaLong: defaults.AboveEmaLong,
                             AboveEmaShort: defaults.AboveEmaShort,
                             BelowEmaLong: defaults.BelowEmaLong,
                             BelowEmaShort: defaults.BelowEmaShort);

        Console.WriteLine("Starting optimization. Press any key to stop and save best results...");

        while (!Console.KeyAvailable)
        {
            var testAboveEmaLong = GenerateRandomStrategy(random, cciColumns, macdColumns, "AboveEmaLong");
            var testAboveEmaShort = GenerateRandomStrategy(random, cciColumns, macdColumns, "AboveEmaShort");
            var testBelowEmaLong = GenerateRandomStrategy(random, cciColumns, macdColumns, "BelowEmaLong");
            var testBelowEmaShort = GenerateRandomStrategy(random, cciColumns, macdColumns, "BelowEmaShort");

            var result = PerformBacktest("BacktestData.csv", headers, emaColumnIndex,
                testAboveEmaLong, testAboveEmaShort, testBelowEmaLong, testBelowEmaShort);

            if (result.Profit > bestProfit)
            {
                bestProfit = result.Profit;
                bestResult = result;
                bestStrategies = (testAboveEmaLong, testAboveEmaShort, testBelowEmaLong, testBelowEmaShort);
                Console.WriteLine($"New best profit found: {bestProfit:F2}");
            }
        }

        Console.ReadKey(true); // Clear the key press
        Console.WriteLine($"\nOptimization stopped. Best profit: {bestProfit:F2}");

        return (bestResult.Profit, bestResult.ResultLines,
            bestStrategies.AboveEmaLong, bestStrategies.AboveEmaShort,
            bestStrategies.BelowEmaLong, bestStrategies.BelowEmaShort);
    }

    private static (double Profit, List<string> ResultLines) PerformBacktest(
        string csvFilePath, string[] headers, int emaColumnIndex,
        Strategy aboveEmaLong, Strategy aboveEmaShort, Strategy belowEmaLong, Strategy belowEmaShort)
    {
        double totalProfit = 0;
        var resultLines = new List<string>();
        var dailyPrices = new Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType, string EmaPosition, double TrailPrice, double TargetPrice)>();

        foreach (var line in File.ReadLines(csvFilePath).Skip(1))
        {
            ProcessDataLine(line, headers, emaColumnIndex, aboveEmaLong, aboveEmaShort, belowEmaLong, belowEmaShort, dailyPrices);
        }

        CalculateResults(dailyPrices, ref totalProfit, resultLines);
        return (totalProfit, resultLines);
    }

    private static void ProcessDataLine(string line, string[] headers, int emaColumnIndex,
        Strategy aboveEmaLong, Strategy aboveEmaShort, Strategy belowEmaLong, Strategy belowEmaShort,
        Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType, string EmaPosition, double TrailPrice, double TargetPrice)> dailyPrices)
    {
        var columns = line.Split(',');
        if (!DateTime.TryParseExact(columns[0], "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateTime)) return;
        if (!double.TryParse(columns[4], out double closePrice)) return;
        if (!double.TryParse(columns[emaColumnIndex], out double ema200)) return;

        bool aboveEma = closePrice > ema200;
        var strategy = aboveEma ? aboveEmaLong : belowEmaLong;
        double atrValue = GetAtrValue(headers, strategy.AtrIndicator, columns);
        string emaPosition = aboveEma ? "Above EMA200" : "Below EMA200";

        bool longCondition = aboveEma;
        bool shortCondition = !aboveEma;

        if (dateTime.TimeOfDay == new TimeSpan(9, 30, 0))
        {
            if (longCondition)
            {
                dailyPrices[dateTime.Date] = (closePrice, 0, "long", emaPosition, closePrice - (atrValue * strategy.TrailStopMultiplier), closePrice * strategy.ProfitTargetMultiplier);
                Console.WriteLine($"ENTRY: Long position opened at {closePrice} on {dateTime:yyyy-MM-dd}");
            }
            else if (shortCondition)
            {
                dailyPrices[dateTime.Date] = (closePrice, 0, "short", emaPosition, closePrice + (atrValue * strategy.TrailStopMultiplier), closePrice * (1 - strategy.ProfitTargetMultiplier));
                Console.WriteLine($"ENTRY: Short position opened at {closePrice} on {dateTime:yyyy-MM-dd}");
            }
        }
        else if (dateTime.TimeOfDay == new TimeSpan(15, 55, 0) && dailyPrices.ContainsKey(dateTime.Date))
        {
            var entry = dailyPrices[dateTime.Date];
            double profit = entry.PositionType == "long" ? closePrice - entry.EntryPrice : entry.EntryPrice - closePrice;
            dailyPrices[dateTime.Date] = (entry.EntryPrice, closePrice, entry.PositionType, entry.EmaPosition, entry.TrailPrice, entry.TargetPrice);

            Console.WriteLine($"EXIT: {entry.PositionType} position closed at {closePrice} on {dateTime:yyyy-MM-dd} - Profit: {profit:F2}");
        }
    }

    private static void CalculateResults(Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType, string EmaPosition, double TrailPrice, double TargetPrice)> dailyPrices,
                                        ref double totalProfit, List<string> resultLines)
    {
        int totalTrades = 0;
        int winningTrades = 0;
        var weeklyProfits = new Dictionary<int, double>();
        var monthlyProfits = new Dictionary<string, double>();

        foreach (var trade in dailyPrices.Where(x => x.Value.EntryPrice > 0 && x.Value.ExitPrice > 0))
        {
            double dailyProfit = trade.Value.PositionType == "long" ?
                                trade.Value.ExitPrice - trade.Value.EntryPrice :
                                trade.Value.EntryPrice - trade.Value.ExitPrice;

            totalProfit += dailyProfit;
            totalTrades++;
            if (dailyProfit > 0) winningTrades++;

            int week = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(
                trade.Key, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            string month = trade.Key.ToString("yyyy-MM");

            weeklyProfits.TryAdd(week, 0);
            weeklyProfits[week] += dailyProfit;

            monthlyProfits.TryAdd(month, 0);
            monthlyProfits[month] += dailyProfit;

            resultLines.Add($"{trade.Key:yyyy-MM-dd},{trade.Value.EntryPrice:F2},{trade.Value.ExitPrice:F2}," +
                          $"{trade.Value.PositionType},{trade.Value.EmaPosition},{dailyProfit:F2}");
        }

        AddSummaryToResults(totalProfit, totalTrades, winningTrades, weeklyProfits, monthlyProfits, resultLines);
    }

    private static void AddSummaryToResults(double totalProfit, int totalTrades, int winningTrades,
                                          Dictionary<int, double> weeklyProfits, Dictionary<string, double> monthlyProfits,
                                          List<string> resultLines)
    {
        double winRate = totalTrades > 0 ? ((double)winningTrades / totalTrades) * 100 : 0;
        int profitableWeeks = weeklyProfits.Count(w => w.Value > 0);
        int profitableMonths = monthlyProfits.Count(m => m.Value > 0);

        resultLines.Insert(0, "Trade Results:");
        resultLines.Add("\nSummary:");
        resultLines.Add($"Total Profit: {totalProfit:F2}");
        resultLines.Add($"Total Trades: {totalTrades}");
        resultLines.Add($"Winning Trades: {winningTrades}");
        resultLines.Add($"Win Rate: {winRate:F2}%");
        resultLines.Add($"Profitable Weeks: {profitableWeeks} out of {weeklyProfits.Count}");
        resultLines.Add($"Profitable Months: {profitableMonths} out of {monthlyProfits.Count}");
    }

    private static List<string> GenerateBestStrategyOutput(Strategy aboveEmaLong, Strategy aboveEmaShort,
                                                      Strategy belowEmaLong, Strategy belowEmaShort)
    {
        var output = new List<string>();
        output.Add("\nBest Strategy Settings:");
        output.Add("var bestStrategy = new DefaultSettings");
        output.Add("{");

        // AboveEmaLong
        output.Add("    AboveEmaLong = new Strategy");
        output.Add("    {");
        output.Add($"        CciIndicator1 = \"{aboveEmaLong.CciIndicator1}\",");
        output.Add($"        CciIndicator2 = \"{aboveEmaLong.CciIndicator2}\",");
        output.Add($"        MacdIndicator1 = \"{aboveEmaLong.MacdIndicator1}\",");
        output.Add($"        MacdIndicator2 = \"{aboveEmaLong.MacdIndicator2}\",");
        output.Add($"        Cci1Threshold = {aboveEmaLong.Cci1Threshold},");
        output.Add($"        Cci2Threshold = {aboveEmaLong.Cci2Threshold},");
        output.Add($"        Macd1Threshold = {aboveEmaLong.Macd1Threshold},");
        output.Add($"        Macd2Threshold = {aboveEmaLong.Macd2Threshold},");
        output.Add($"        Cci1Operator = \"{aboveEmaLong.Cci1Operator}\",");
        output.Add($"        Cci2Operator = \"{aboveEmaLong.Cci2Operator}\",");
        output.Add($"        Macd1Operator = \"{aboveEmaLong.Macd1Operator}\",");
        output.Add($"        Macd2Operator = \"{aboveEmaLong.Macd2Operator}\"");
        output.Add("    },");

        // AboveEmaShort
        output.Add("    AboveEmaShort = new Strategy");
        output.Add("    {");
        output.Add($"        CciIndicator1 = \"{aboveEmaShort.CciIndicator1}\",");
        output.Add($"        CciIndicator2 = \"{aboveEmaShort.CciIndicator2}\",");
        output.Add($"        MacdIndicator1 = \"{aboveEmaShort.MacdIndicator1}\",");
        output.Add($"        MacdIndicator2 = \"{aboveEmaShort.MacdIndicator2}\",");
        output.Add($"        Cci1Threshold = {aboveEmaShort.Cci1Threshold},");
        output.Add($"        Cci2Threshold = {aboveEmaShort.Cci2Threshold},");
        output.Add($"        Macd1Threshold = {aboveEmaShort.Macd1Threshold},");
        output.Add($"        Macd2Threshold = {aboveEmaShort.Macd2Threshold},");
        output.Add($"        Cci1Operator = \"{aboveEmaShort.Cci1Operator}\",");
        output.Add($"        Cci2Operator = \"{aboveEmaShort.Cci2Operator}\",");
        output.Add($"        Macd1Operator = \"{aboveEmaShort.Macd1Operator}\",");
        output.Add($"        Macd2Operator = \"{aboveEmaShort.Macd2Operator}\"");
        output.Add("    },");

        // BelowEmaLong
        output.Add("    BelowEmaLong = new Strategy");
        output.Add("    {");
        output.Add($"        CciIndicator1 = \"{belowEmaLong.CciIndicator1}\",");
        output.Add($"        CciIndicator2 = \"{belowEmaLong.CciIndicator2}\",");
        output.Add($"        MacdIndicator1 = \"{belowEmaLong.MacdIndicator1}\",");
        output.Add($"        MacdIndicator2 = \"{belowEmaLong.MacdIndicator2}\",");
        output.Add($"        Cci1Threshold = {belowEmaLong.Cci1Threshold},");
        output.Add($"        Cci2Threshold = {belowEmaLong.Cci2Threshold},");
        output.Add($"        Macd1Threshold = {belowEmaLong.Macd1Threshold},");
        output.Add($"        Macd2Threshold = {belowEmaLong.Macd2Threshold},");
        output.Add($"        Cci1Operator = \"{belowEmaLong.Cci1Operator}\",");
        output.Add($"        Cci2Operator = \"{belowEmaLong.Cci2Operator}\",");
        output.Add($"        Macd1Operator = \"{belowEmaLong.Macd1Operator}\",");
        output.Add($"        Macd2Operator = \"{belowEmaLong.Macd2Operator}\"");
        output.Add("    },");

        // BelowEmaShort
        output.Add("    BelowEmaShort = new Strategy");
        output.Add("    {");
        output.Add($"        CciIndicator1 = \"{belowEmaShort.CciIndicator1}\",");
        output.Add($"        CciIndicator2 = \"{belowEmaShort.CciIndicator2}\",");
        output.Add($"        MacdIndicator1 = \"{belowEmaShort.MacdIndicator1}\",");
        output.Add($"        MacdIndicator2 = \"{belowEmaShort.MacdIndicator2}\",");
        output.Add($"        Cci1Threshold = {belowEmaShort.Cci1Threshold},");
        output.Add($"        Cci2Threshold = {belowEmaShort.Cci2Threshold},");
        output.Add($"        Macd1Threshold = {belowEmaShort.Macd1Threshold},");
        output.Add($"        Macd2Threshold = {belowEmaShort.Macd2Threshold},");
        output.Add($"        Cci1Operator = \"{belowEmaShort.Cci1Operator}\",");
        output.Add($"        Cci2Operator = \"{belowEmaShort.Cci2Operator}\",");
        output.Add($"        Macd1Operator = \"{belowEmaShort.Macd1Operator}\",");
        output.Add($"        Macd2Operator = \"{belowEmaShort.Macd2Operator}\"");
        output.Add("    }");

        output.Add("};");

        return output;
    }

    private static List<IndicatorInfo> GetIndicatorColumns(string[] headers, string indicatorType)
    {
        return headers
            .Select((name, index) => new IndicatorInfo { Name = name, Index = index })
            .Where(info => info.Name.Contains(indicatorType))
            .ToList();
    }

    private static double GetAtrValue(string[] headers, string atrIndicator, string[] columns)
    {
        int index = Array.FindIndex(headers, h => h == atrIndicator);
        return index != -1 && double.TryParse(columns[index], out double value) ? value : 0;
    }
}




Im treyin gto fix this code to run made a few chnages, but also need the buy and short conditins above and below the ema should be about 16 conditions and it should have all the correct outputs to the file and contain all the settings that were used so can easily copy and paste back into defaults into the code. ALso make sure all the atr conditon are vhnaged randomly too and their values and used properly for all their exits. Each entry conditon based on short or buy if below or able ema200 all should also have their own corresponding esxit conditions. Then like in here every setup for the entry conditions al the indicators should have ranges and steps that each get geneteeredt based off everytime.