using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

public class Strategy
{
    // Technical Indicators
    public required string CciIndicator1 { get; set; }
    public required string CciIndicator2 { get; set; }
    public required string MacdIndicator1Line { get; set; }
    public required string MacdIndicator2Line { get; set; }
    public required string AtrIndicator { get; set; }

    // Thresholds
    public double Cci1Threshold { get; set; }
    public double Cci2Threshold { get; set; }
    public double Macd1Threshold { get; set; }
    public double Macd2Threshold { get; set; }

    // Operators
    public required string Cci1Operator { get; set; }
    public required string Cci2Operator { get; set; }
    public required string Macd1Operator { get; set; }
    public required string Macd2Operator { get; set; }

    // Risk Management
    public double TrailStopMultiplier { get; set; }
    public double ProfitTargetMultiplier { get; set; }
}

public class DefaultSettings
{
    public Strategy AboveEmaLong1 { get; set; }
    public Strategy AboveEmaLong2 { get; set; }
    public Strategy AboveEmaShort1 { get; set; }
    public Strategy AboveEmaShort2 { get; set; }
    public Strategy BelowEmaLong1 { get; set; }
    public Strategy BelowEmaLong2 { get; set; }
    public Strategy BelowEmaShort1 { get; set; }
    public Strategy BelowEmaShort2 { get; set; }

    public DefaultSettings()
    {
        AboveEmaLong1 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000,
            Cci2Threshold = -1000,
            Macd1Threshold = -5,
            Macd2Threshold = -5,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        AboveEmaLong2 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000,
            Cci2Threshold = -1000,
            Macd1Threshold = -5,
            Macd2Threshold = -5,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        AboveEmaShort1 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000,
            Cci2Threshold = 1000,
            Macd1Threshold = 5,
            Macd2Threshold = 5,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        AboveEmaShort2 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000,
            Cci2Threshold = 1000,
            Macd1Threshold = 5,
            Macd2Threshold = 5,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        BelowEmaLong1 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000,
            Cci2Threshold = -1000,
            Macd1Threshold = -5,
            Macd2Threshold = -5,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        BelowEmaLong2 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000,
            Cci2Threshold = -1000,
            Macd1Threshold = -5,
            Macd2Threshold = -5,
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        BelowEmaShort1 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000,
            Cci2Threshold = 1000,
            Macd1Threshold = 5,
            Macd2Threshold = 5,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };

        BelowEmaShort2 = new Strategy
        {
            CciIndicator1 = "CCI_55",
            CciIndicator2 = "CCI_105",
            MacdIndicator1Line = "MACD_11_25_9_line",
            MacdIndicator2Line = "MACD_9_20_9_line",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000,
            Cci2Threshold = 1000,
            Macd1Threshold = 5,
            Macd2Threshold = 5,
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 5.0,
            ProfitTargetMultiplier = 5.0
        };
    }
}


public class SimpleDailyBacktest
{
    private static void PrintStrategySummary(DefaultSettings settings)
    {
        Console.WriteLine("\n=== STRATEGY CONFIGURATION SUMMARY ===");

        void PrintStrategyDetails(string name, Strategy strategy)
        {
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"\n{name} Strategy Configuration:");
            Console.ResetColor();

            // CCI Settings
            Console.WriteLine("  CCI Settings:");
            Console.WriteLine($"    Signal 1: {strategy.CciIndicator1} {strategy.Cci1Operator} {strategy.Cci1Threshold}");
            Console.WriteLine($"    Signal 2: {strategy.CciIndicator2} {strategy.Cci2Operator} {strategy.Cci2Threshold}");

            // MACD Settings
            Console.WriteLine("  MACD Settings:");
            Console.WriteLine($"    Signal 1: {strategy.MacdIndicator1Line} {strategy.Macd1Operator} {strategy.Macd1Threshold}");
            Console.WriteLine($"    Signal 2: {strategy.MacdIndicator2Line} {strategy.Macd2Operator} {strategy.Macd2Threshold}");

            // Risk Management
            Console.WriteLine("  Risk Management:");
            Console.WriteLine($"    ATR: {strategy.AtrIndicator}");
            Console.WriteLine($"    Trail Stop: {strategy.TrailStopMultiplier}x ATR");
            Console.WriteLine($"    Profit Target: {strategy.ProfitTargetMultiplier}x ATR");
        }

        var strategies = new[]
        {
        ("Above EMA Long 1", settings.AboveEmaLong1),
        ("Above EMA Long 2", settings.AboveEmaLong2),
        ("Above EMA Short 1", settings.AboveEmaShort1),
        ("Above EMA Short 2", settings.AboveEmaShort2),
        ("Below EMA Long 1", settings.BelowEmaLong1),
        ("Below EMA Long 2", settings.BelowEmaLong2),
        ("Below EMA Short 1", settings.BelowEmaShort1),
        ("Below EMA Short 2", settings.BelowEmaShort2)
    };

        foreach (var (name, strategy) in strategies)
        {
            PrintStrategyDetails(name, strategy);
        }
    }

    public static void Main()
    {
        try
        {
            Console.WriteLine("=== BACKTEST SYSTEM INITIALIZATION ===");
            var defaults = new DefaultSettings();

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("\nUse default settings? (YES/NO): ");
            Console.ResetColor();

            bool useDefaults = Console.ReadLine()?.Trim().ToUpper() == "YES";

            if (useDefaults)
            {
                PrintStrategySummary(defaults);
            }

            Console.WriteLine("\nLoading data file...");
            string[] headers = File.ReadLines("BacktestData.csv").First().Split(',');
            var data = LoadData("BacktestData.csv", headers, defaults, useDefaults);


            Console.WriteLine("\nInitiating backtest...");
            RunBacktest(useDefaults, defaults, headers, data);

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\nBacktest completed successfully!");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey();
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"\nError: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey();
        }
    }


    private static List<Dictionary<string, double>> LoadData(string filePath, string[] headers, DefaultSettings settings, bool useDefaults)
    {
        var data = new List<Dictionary<string, double>>();

        if (useDefaults)
        {
            var requiredIndicators = new HashSet<string>
        {
            // AboveEmaLong1
            settings.AboveEmaLong1.AtrIndicator,
            settings.AboveEmaLong1.CciIndicator1,
            settings.AboveEmaLong1.CciIndicator2,
            settings.AboveEmaLong1.MacdIndicator1Line,
            settings.AboveEmaLong1.MacdIndicator2Line,
            
            // AboveEmaLong2
            settings.AboveEmaLong2.AtrIndicator,
            settings.AboveEmaLong2.CciIndicator1,
            settings.AboveEmaLong2.CciIndicator2,
            settings.AboveEmaLong2.MacdIndicator1Line,
            settings.AboveEmaLong2.MacdIndicator2Line,
            
            // AboveEmaShort1
            settings.AboveEmaShort1.AtrIndicator,
            settings.AboveEmaShort1.CciIndicator1,
            settings.AboveEmaShort1.CciIndicator2,
            settings.AboveEmaShort1.MacdIndicator1Line,
            settings.AboveEmaShort1.MacdIndicator2Line,
            
            // AboveEmaShort2
            settings.AboveEmaShort2.AtrIndicator,
            settings.AboveEmaShort2.CciIndicator1,
            settings.AboveEmaShort2.CciIndicator2,
            settings.AboveEmaShort2.MacdIndicator1Line,
            settings.AboveEmaShort2.MacdIndicator2Line,
            
            // BelowEmaLong1
            settings.BelowEmaLong1.AtrIndicator,
            settings.BelowEmaLong1.CciIndicator1,
            settings.BelowEmaLong1.CciIndicator2,
            settings.BelowEmaLong1.MacdIndicator1Line,
            settings.BelowEmaLong1.MacdIndicator2Line,
            
            // BelowEmaLong2
            settings.BelowEmaLong2.AtrIndicator,
            settings.BelowEmaLong2.CciIndicator1,
            settings.BelowEmaLong2.CciIndicator2,
            settings.BelowEmaLong2.MacdIndicator1Line,
            settings.BelowEmaLong2.MacdIndicator2Line,
            
            // BelowEmaShort1
            settings.BelowEmaShort1.AtrIndicator,
            settings.BelowEmaShort1.CciIndicator1,
            settings.BelowEmaShort1.CciIndicator2,
            settings.BelowEmaShort1.MacdIndicator1Line,
            settings.BelowEmaShort1.MacdIndicator2Line,
            
            // BelowEmaShort2
            settings.BelowEmaShort2.AtrIndicator,
            settings.BelowEmaShort2.CciIndicator1,
            settings.BelowEmaShort2.CciIndicator2,
            settings.BelowEmaShort2.MacdIndicator1Line,
            settings.BelowEmaShort2.MacdIndicator2Line,

            "EMA200"
        };

            Console.WriteLine("\n=== Data Loading Diagnostics ===");
            Console.WriteLine("Available indicators in file:");
            Console.WriteLine(string.Join(", ", headers));

            Console.WriteLine("\nValidating required indicators:");
            foreach (var indicator in requiredIndicators)
            {
                var exists = headers.Contains(indicator);
                Console.WriteLine($"- {indicator}: {(exists ? "Found" : "Missing")}");
            }
        }

        try
        {
            var lines = File.ReadAllLines(filePath);
            Console.WriteLine($"\nProcessing {lines.Length - 1} data rows...");

            foreach (var line in lines.Skip(1))
            {
                var values = line.Split(',');
                var indicators = new Dictionary<string, double>();

                for (int i = 0; i < headers.Length; i++)
                {
                    string header = headers[i];
                    if (header == "DateTime")
                    {
                        indicators[header] = DateTime.Parse(values[i], CultureInfo.InvariantCulture).ToOADate();
                        continue;
                    }

                    if (double.TryParse(values[i], NumberStyles.Any, CultureInfo.InvariantCulture, out double result))
                    {
                        indicators[header] = result;
                    }
                }

                data.Add(indicators);

                if (data.Count == 1)
                {
                    Console.WriteLine("\nFirst row indicator values:");
                    foreach (var kvp in indicators.OrderBy(x => x.Key))
                    {
                        Console.WriteLine($"- {kvp.Key}: {kvp.Value}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"\nData Loading Error:");
            Console.WriteLine($"Type: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"Stack: {ex.StackTrace}");
        }

        return data;
    }




    private static void RunBacktest(bool useDefaults, DefaultSettings defaults, string[] headers, List<Dictionary<string, double>> data)
    {
        try
        {
            Console.WriteLine("=================================================");
            Console.WriteLine($"Starting Backtest - {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"Mode: {(useDefaults ? "Default Values" : "Optimization")}");
            Console.WriteLine($"Data Points: {data.Count}");
            Console.WriteLine("=================================================\n");

            if (useDefaults)
            {
                Console.WriteLine("Running backtest with default settings...");
                double result = PerformBacktest(data, defaults);
                SaveDefaultValuesResults(result, defaults);

                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"\nBacktest Complete! Final Result: ${result:F2}");
                Console.ResetColor();
            }
            else
            {
                Console.WriteLine("Starting optimization process...");
                var bestProfit = RunOptimization(data, headers, defaults);
                SaveOptimizationResults(bestProfit, defaults);

                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"\nOptimization Complete! Best Profit: ${bestProfit:F2}");
                Console.ResetColor();
            }

            Console.WriteLine("\nResults have been saved to file.");
            Console.WriteLine("=================================================");
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("\nERROR DETAILS:");
            Console.WriteLine($"Type: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            Console.ResetColor();

            // Log the error to a file
            File.AppendAllText("BacktestErrors.log",
                $"\n[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {ex.GetType().Name}: {ex.Message}\n{ex.StackTrace}\n");
        }
        finally
        {
            Console.WriteLine("\nBacktest process completed.");
        }
    }


    private static double PerformBacktest(List<Dictionary<string, double>> data, DefaultSettings settings)
    {
        var openTrades = new Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)>();
        var closedTrades = new Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)>();
        bool tradeOpen = false;
        int processedBars = 0;

        Console.WriteLine($"Starting backtest on {data.Count} bars of data...");

        for (int i = 0; i < data.Count; i++)
        {
            var line = data[i];
            var dateTime = DateTime.FromOADate(line["DateTime"]);
            var closePrice = line["Close"];
            var atrValue = line[settings.AboveEmaLong1.AtrIndicator];

            // Validate required indicators
            var requiredIndicators = new[]
            {
            settings.AboveEmaLong1.CciIndicator1,
            settings.AboveEmaLong1.CciIndicator2,
            settings.AboveEmaLong1.MacdIndicator1Line,
            settings.AboveEmaLong1.MacdIndicator2Line,
            "EMA200"
        };

            if (requiredIndicators.Any(indicator => !line.ContainsKey(indicator)))
            {
                Console.WriteLine($"Missing indicator(s) at {dateTime:yyyy-MM-dd HH:mm:ss}");
                continue;
            }

            var indicators = new Dictionary<string, double>
        {
            { settings.AboveEmaLong1.CciIndicator1, line[settings.AboveEmaLong1.CciIndicator1] },
            { settings.AboveEmaLong1.CciIndicator2, line[settings.AboveEmaLong1.CciIndicator2] },
            { settings.AboveEmaLong1.MacdIndicator1Line, line[settings.AboveEmaLong1.MacdIndicator1Line] },
            { settings.AboveEmaLong1.MacdIndicator2Line, line[settings.AboveEmaLong1.MacdIndicator2Line] },
            { "EMA200", line["EMA200"] }
        };

            // Print progress every 1000 bars
            if (++processedBars % 1000 == 0)
            {
                Console.WriteLine($"Processed {processedBars}/{data.Count} bars - Current date: {dateTime:yyyy-MM-dd}");
            }

            // Print detailed indicators for debugging (every other bar)
            if (i % 2 == 0)
            {
                PrintIndicatorValues(dateTime, closePrice, indicators, settings);
            }

            // Trade logic based on EMA position
            if (indicators["EMA200"] < closePrice)
            {
                if (!tradeOpen)
                {
                    tradeOpen = ExecuteAboveEmaStrategies(settings, dateTime, closePrice, atrValue, indicators, openTrades);
                }
            }
            else
            {
                if (!tradeOpen)
                {
                    tradeOpen = ExecuteBelowEmaStrategies(settings, dateTime, closePrice, atrValue, indicators, openTrades);
                }
            }

            // Manage existing trades
            ManageExits(openTrades, dateTime, closePrice, atrValue, ref tradeOpen);

            // End of day reset
            if (dateTime.TimeOfDay >= new TimeSpan(15, 55, 0))
            {
                tradeOpen = false;
            }
        }

        return CalculateResults(closedTrades);
    }

    private static bool ExecuteAboveEmaStrategies(DefaultSettings settings, DateTime dateTime, double closePrice,
        double atrValue, Dictionary<string, double> indicators,
        Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades)
    {
        return ApplyStrategy(settings.AboveEmaLong1, dateTime, closePrice, atrValue, indicators, openTrades, "Long") ||
               ApplyStrategy(settings.AboveEmaLong2, dateTime, closePrice, atrValue, indicators, openTrades, "Long") ||
               ApplyStrategy(settings.AboveEmaShort1, dateTime, closePrice, atrValue, indicators, openTrades, "Short") ||
               ApplyStrategy(settings.AboveEmaShort2, dateTime, closePrice, atrValue, indicators, openTrades, "Short");
    }

    private static bool ExecuteBelowEmaStrategies(DefaultSettings settings, DateTime dateTime, double closePrice,
        double atrValue, Dictionary<string, double> indicators,
        Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades)
    {
        return ApplyStrategy(settings.BelowEmaLong1, dateTime, closePrice, atrValue, indicators, openTrades, "Long") ||
               ApplyStrategy(settings.BelowEmaLong2, dateTime, closePrice, atrValue, indicators, openTrades, "Long") ||
               ApplyStrategy(settings.BelowEmaShort1, dateTime, closePrice, atrValue, indicators, openTrades, "Short") ||
               ApplyStrategy(settings.BelowEmaShort2, dateTime, closePrice, atrValue, indicators, openTrades, "Short");
    }




    private static void PrintIndicatorValues(DateTime dateTime, double closePrice, Dictionary<string, double> indicators, DefaultSettings settings)
    {
        Console.WriteLine("\n=================================================");
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine($"Market Data - {dateTime:yyyy-MM-dd HH:mm:ss}");
        Console.WriteLine($"Close Price: ${closePrice:F2}");
        Console.ResetColor();
        Console.WriteLine("=================================================");

        var strategies = new Dictionary<string, Strategy>
    {
        { "AboveEmaLong1", settings.AboveEmaLong1 },
        { "AboveEmaLong2", settings.AboveEmaLong2 },
        { "AboveEmaShort1", settings.AboveEmaShort1 },
        { "AboveEmaShort2", settings.AboveEmaShort2 },
        { "BelowEmaLong1", settings.BelowEmaLong1 },
        { "BelowEmaLong2", settings.BelowEmaLong2 },
        { "BelowEmaShort1", settings.BelowEmaShort1 },
        { "BelowEmaShort2", settings.BelowEmaShort2 }
    };

        foreach (var strategyPair in strategies)
        {
            var strategy = strategyPair.Value;
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"\nStrategy: {strategyPair.Key}");
            Console.ResetColor();

            // CCI Indicators
            Console.WriteLine("  CCI Indicators:");
            if (indicators.ContainsKey(strategy.CciIndicator1) && indicators.ContainsKey(strategy.CciIndicator2))
            {
                PrintIndicator("CCI-1", strategy.CciIndicator1, indicators[strategy.CciIndicator1],
                              strategy.Cci1Operator, strategy.Cci1Threshold);
                PrintIndicator("CCI-2", strategy.CciIndicator2, indicators[strategy.CciIndicator2],
                              strategy.Cci2Operator, strategy.Cci2Threshold);
            }

            // MACD Indicators
            Console.WriteLine("  MACD Indicators:");
            if (indicators.ContainsKey(strategy.MacdIndicator1Line) && indicators.ContainsKey(strategy.MacdIndicator2Line))
            {
                PrintIndicator("MACD-1", strategy.MacdIndicator1Line, indicators[strategy.MacdIndicator1Line],
                              strategy.Macd1Operator, strategy.Macd1Threshold);
                PrintIndicator("MACD-2", strategy.MacdIndicator2Line, indicators[strategy.MacdIndicator2Line],
                              strategy.Macd2Operator, strategy.Macd2Threshold);
            }

            // Risk Management
            Console.WriteLine("  Risk Management:");
            if (indicators.ContainsKey(strategy.AtrIndicator))
            {
                Console.WriteLine($"    ATR: {strategy.AtrIndicator} = {indicators[strategy.AtrIndicator]:F4}");
                Console.WriteLine($"    Trail Stop: {strategy.TrailStopMultiplier}x ATR");
                Console.WriteLine($"    Profit Target: {strategy.ProfitTargetMultiplier}x ATR");
            }
        }
    }


    private static void PrintIndicator(string name, string indicator, double value, string op, double threshold)
    {
        Console.Write($"    {name}: {indicator} = ");
        Console.ForegroundColor = value > threshold ? ConsoleColor.Green : ConsoleColor.Red;
        Console.Write($"{value:F4}");
        Console.ResetColor();
        Console.WriteLine($" ({op} {threshold:F4})");
    }


    private static bool ApplyStrategy(Strategy strategy, DateTime dateTime, double closePrice, double atrValue,
        Dictionary<string, double> indicators,
        Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades,
        string positionType)
    {
        if (CheckEntryConditions(strategy, indicators) && dateTime.TimeOfDay == new TimeSpan(9, 30, 0))
        {
            var entryPrice = closePrice;

            // Calculate risk parameters
            var trailStop = positionType == "Long"
                ? closePrice - (atrValue * strategy.TrailStopMultiplier)
                : closePrice + (atrValue * strategy.TrailStopMultiplier);

            var targetProfit = positionType == "Long"
                ? closePrice + (atrValue * strategy.ProfitTargetMultiplier)
                : closePrice - (atrValue * strategy.ProfitTargetMultiplier);

            // Record trade details
            openTrades[dateTime] = (entryPrice, positionType, trailStop, targetProfit);

            // Log trade entry with color coding
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"\nNew Trade Opened at {dateTime:HH:mm:ss}");
            Console.WriteLine($"Position: {positionType}");
            Console.WriteLine($"Entry Price: ${entryPrice:F2}");
            Console.WriteLine($"Trail Stop: ${trailStop:F2}");
            Console.WriteLine($"Target: ${targetProfit:F2}");
            Console.ResetColor();

            LogTrade(dateTime, dateTime, entryPrice, entryPrice, positionType, 0);
            return true;
        }
        return false;
    }



    private static double RunOptimization(List<Dictionary<string, double>> data, string[] headers, DefaultSettings defaults)
    {
        var bestProfit = double.MinValue;
        var bestSettings = new DefaultSettings();
        var startTime = DateTime.Now;
        var timeout = TimeSpan.FromHours(12); // 12-hour runtime for overnight processing
        var totalTests = 100000; // Increased tests for longer runtime
        var testsCompleted = 0;

        Console.WriteLine("Optimization running. Press any key to stop...");

        while (!Console.KeyAvailable &&
               DateTime.Now - startTime < timeout &&
               testsCompleted < totalTests)
        {
            RandomizeStrategySettings(defaults);
            var result = PerformBacktest(data, defaults);
            testsCompleted++;

            if (testsCompleted % 50 == 0) // Show progress every 50 tests
            {
                Console.WriteLine($"Test {testsCompleted}/{totalTests} - Current Profit: {result}");
            }

            if (result > bestProfit)
            {
                bestProfit = result;
                bestSettings = new DefaultSettings
                {
                    AboveEmaLong1 = defaults.AboveEmaLong1,
                    AboveEmaLong2 = defaults.AboveEmaLong2,
                    AboveEmaShort1 = defaults.AboveEmaShort1,
                    AboveEmaShort2 = defaults.AboveEmaShort2,
                    BelowEmaLong1 = defaults.BelowEmaLong1,
                    BelowEmaLong2 = defaults.BelowEmaLong2,
                    BelowEmaShort1 = defaults.BelowEmaShort1,
                    BelowEmaShort2 = defaults.BelowEmaShort2
                };
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"New Best Profit Found: {bestProfit}!");
                Console.ResetColor();
            }
        }

        // Results will always be saved, regardless of how the process ends
        Console.WriteLine($"\nOptimization Complete!");
        Console.WriteLine($"Tests Completed: {testsCompleted}");
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine($"Best Profit: {bestProfit}");
        Console.ResetColor();
        SaveOptimizationResults(bestProfit, bestSettings);

        return bestProfit;
    }


    private static void RandomizeStrategySettings(DefaultSettings settings)
    {
        var random = new Random();

        string[] cciIndicators = {
        "CCI_5", "CCI_15", "CCI_25", "CCI_35", "CCI_45", "CCI_55",
        "CCI_65", "CCI_75", "CCI_85", "CCI_95", "CCI_105", "CCI_115",
        "CCI_125", "CCI_135", "CCI_145", "CCI_155", "CCI_165", "CCI_175",
        "CCI_185", "CCI_195", "CCI_205", "CCI_215", "CCI_225", "CCI_235",
        "CCI_245", "CCI_255", "CCI_265", "CCI_275", "CCI_285", "CCI_295"
    };

        string[] macdIndicators = {
        "MACD_2_5_9_line", "MACD_4_10_9_line", "MACD_6_15_9_line",
        "MACD_9_20_9_line", "MACD_11_25_9_line", "MACD_13_30_9_line",
        "MACD_16_35_9_line", "MACD_18_40_9_line", "MACD_20_45_9_line",
        "MACD_23_50_9_line", "MACD_25_55_9_line", "MACD_27_60_9_line",
        "MACD_29_65_9_line", "MACD_32_70_9_line", "MACD_34_75_9_line",
        "MACD_36_80_9_line", "MACD_39_85_9_line", "MACD_41_90_9_line",
        "MACD_43_95_9_line", "MACD_46_100_9_line", "MACD_48_105_9_line",
        "MACD_50_110_9_line", "MACD_52_115_9_line", "MACD_55_120_9_line"
    };

        string[] atrIndicators = {
        "ATR_2", "ATR_4", "ATR_6", "ATR_8", "ATR_10",
        "ATR_12", "ATR_14", "ATR_16", "ATR_18", "ATR_20"
    };

        string[] operators = { ">", "<" };

        var strategies = new[]
        {
        settings.AboveEmaLong1, settings.AboveEmaLong2, settings.AboveEmaShort1, settings.AboveEmaShort2,
        settings.BelowEmaLong1, settings.BelowEmaLong2, settings.BelowEmaShort1, settings.BelowEmaShort2
    };

        foreach (var strategy in strategies)
        {
            strategy.CciIndicator1 = cciIndicators[random.Next(cciIndicators.Length)];
            strategy.CciIndicator2 = cciIndicators[random.Next(cciIndicators.Length)];
            strategy.MacdIndicator1Line = macdIndicators[random.Next(macdIndicators.Length)];
            strategy.MacdIndicator2Line = macdIndicators[random.Next(macdIndicators.Length)];
            strategy.AtrIndicator = atrIndicators[random.Next(atrIndicators.Length)];
            strategy.Cci1Operator = operators[random.Next(operators.Length)];
            strategy.Cci2Operator = operators[random.Next(operators.Length)];
            strategy.Macd1Operator = operators[random.Next(operators.Length)];
            strategy.Macd2Operator = operators[random.Next(operators.Length)];

            strategy.Cci1Threshold = random.Next(-60, 61) * 5;  // -300 to 300 by 5
            strategy.Cci2Threshold = random.Next(-60, 61) * 5;  // -300 to 300 by 5
            strategy.Macd1Threshold = (random.Next(-100, 101)) / 100.0;  // -1 to 1 by 0.01
            strategy.Macd2Threshold = (random.Next(-100, 101)) / 100.0;  // -1 to 1 by 0.01
            strategy.TrailStopMultiplier = random.Next(2, 21);  // 2 to 20 by 1
            strategy.ProfitTargetMultiplier = random.Next(2, 21);  // 2 to 20 by 1
        }
    }


    private static bool CheckEntryConditions(Strategy strategy, Dictionary<string, double> indicators)
    {
        bool indicatorsExist = indicators.ContainsKey(strategy.CciIndicator1) &&
                               indicators.ContainsKey(strategy.CciIndicator2) &&
                               indicators.ContainsKey(strategy.MacdIndicator1Line) &&
                               indicators.ContainsKey(strategy.MacdIndicator2Line);

        if (!indicatorsExist) return false;

        bool cci1Condition = EvaluateCondition(indicators[strategy.CciIndicator1], strategy.Cci1Threshold, strategy.Cci1Operator);
        bool cci2Condition = EvaluateCondition(indicators[strategy.CciIndicator2], strategy.Cci2Threshold, strategy.Cci2Operator);
        bool macd1Condition = EvaluateCondition(indicators[strategy.MacdIndicator1Line], strategy.Macd1Threshold, strategy.Macd1Operator);
        bool macd2Condition = EvaluateCondition(indicators[strategy.MacdIndicator2Line], strategy.Macd2Threshold, strategy.Macd2Operator);

        return cci1Condition && cci2Condition && macd1Condition && macd2Condition;
    }

    private static bool EvaluateCondition(double indicatorValue, double threshold, string op)
    {
        return op switch
        {
            ">" => indicatorValue > threshold,
            "<" => indicatorValue < threshold,
            ">=" => indicatorValue >= threshold,
            "<=" => indicatorValue <= threshold,
            "==" => indicatorValue == threshold,
            "!=" => indicatorValue != threshold,
            _ => throw new ArgumentException($"Invalid operator: {op}")
        };
    }

    private static void ManageExits(Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades, DateTime dateTime, double closePrice, double atrValue, ref bool tradeOpen)
    {
        var exitTime = new TimeSpan(15, 55, 0); // 3:55 PM

        foreach (var trade in openTrades.ToList())
        {
            var (entryPrice, positionType, trailStop, targetProfit) = trade.Value;

            bool exitConditionMet = positionType switch
            {
                "Long" => closePrice <= trailStop || closePrice >= targetProfit,
                "Short" => closePrice >= trailStop || closePrice <= targetProfit,
                _ => false
            };

            if (exitConditionMet || dateTime.TimeOfDay >= exitTime)
            {
                double exitPrice = closePrice;
                double profit = positionType == "Long" ? exitPrice - entryPrice : entryPrice - exitPrice;
                LogTrade(trade.Key, dateTime, entryPrice, exitPrice, positionType, profit);
                openTrades.Remove(trade.Key);
                tradeOpen = false; // Reset tradeOpen flag
            }
        }
    }

    private static void LogTrade(DateTime entryDate, DateTime exitDate, double entryPrice, double exitPrice, string positionType, double profit)
    {
        string logFilePath = "TradeLog.txt";
        string logEntry = $"{entryDate:yyyy-MM-dd HH:mm:ss},{exitDate:yyyy-MM-dd HH:mm:ss},{entryPrice:F2},{exitPrice:F2},{positionType},{profit:F2}";
        using (StreamWriter writer = new StreamWriter(logFilePath, true))
        {
            writer.WriteLine(logEntry);
        }
    }

    private static double CalculateResults(Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)> trades)
    {
        double totalProfit = 0;
        var dailyProfits = new Dictionary<DateTime, double>();
        var weeklyProfits = new Dictionary<int, double>();
        var monthlyProfits = new Dictionary<string, double>();

        foreach (var trade in trades)
        {
            DateTime entryDate = trade.Key;
            double profit = trade.Value.PositionType == "Long" ?
                trade.Value.ExitPrice - trade.Value.EntryPrice :
                trade.Value.EntryPrice - trade.Value.ExitPrice;

            totalProfit += profit;

            // Daily tracking
            dailyProfits.TryAdd(entryDate.Date, 0);
            dailyProfits[entryDate.Date] += profit;

            // Weekly tracking
            int weekOfYear = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(
                entryDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            weeklyProfits.TryAdd(weekOfYear, 0);
            weeklyProfits[weekOfYear] += profit;

            // Monthly tracking
            string monthYear = entryDate.ToString("yyyy-MM");
            monthlyProfits.TryAdd(monthYear, 0);
            monthlyProfits[monthYear] += profit;
        }

        // Output formatting
        Console.WriteLine("Total Profit: " + totalProfit);
        Console.WriteLine("Daily Profits: " + string.Join(", ", dailyProfits.Select(kvp => $"{kvp.Key:yyyy-MM-dd}: {kvp.Value:F2}")));
        Console.WriteLine("Weekly Profits: " + string.Join(", ", weeklyProfits.Select(kvp => $"Week {kvp.Key}: {kvp.Value:F2}")));
        Console.WriteLine("Monthly Profits: " + string.Join(", ", monthlyProfits.Select(kvp => $"{kvp.Key}: {kvp.Value:F2}")));

        return totalProfit;
    }


    private static void GenerateSummary(Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)> trades)
    {
        // Basic Statistics
        int totalTrades = trades.Count;
        var profits = trades.Select(t => t.Value.PositionType == "Long" ?
            t.Value.ExitPrice - t.Value.EntryPrice :
            t.Value.EntryPrice - t.Value.ExitPrice).ToList();

        int winningTrades = profits.Count(p => p > 0);
        int losingTrades = profits.Count(p => p <= 0);
        double winRate = (double)winningTrades / totalTrades * 100;

        // Advanced Profit Metrics
        double totalProfit = profits.Sum();
        double averageProfit = profits.Average();
        double maxProfit = profits.Max();
        double maxLoss = profits.Min();
        double profitFactor = profits.Where(p => p > 0).Sum() / Math.Abs(profits.Where(p => p < 0).Sum());

        // Streak Analysis
        int currentStreak = 0;
        int maxWinStreak = 0;
        int maxLoseStreak = 0;
        int currentWinStreak = 0;
        int currentLoseStreak = 0;

        foreach (var profit in profits)
        {
            if (profit > 0)
            {
                currentWinStreak++;
                currentLoseStreak = 0;
                maxWinStreak = Math.Max(maxWinStreak, currentWinStreak);
            }
            else
            {
                currentLoseStreak++;
                currentWinStreak = 0;
                maxLoseStreak = Math.Max(maxLoseStreak, currentLoseStreak);
            }
        }

        // Time-based Analysis
        var dailyProfits = new Dictionary<DateTime, double>();
        var weeklyProfits = new Dictionary<int, double>();
        var monthlyProfits = new Dictionary<string, double>();

        foreach (var trade in trades)
        {
            DateTime entryDate = trade.Key;
            double profit = trade.Value.PositionType == "Long" ?
                trade.Value.ExitPrice - trade.Value.EntryPrice :
                trade.Value.EntryPrice - trade.Value.ExitPrice;

            dailyProfits.TryAdd(entryDate.Date, 0);
            dailyProfits[entryDate.Date] += profit;

            int weekOfYear = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(
                entryDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            weeklyProfits.TryAdd(weekOfYear, 0);
            weeklyProfits[weekOfYear] += profit;

            string monthYear = entryDate.ToString("yyyy-MM");
            monthlyProfits.TryAdd(monthYear, 0);
            monthlyProfits[monthYear] += profit;
        }

        // Performance Ratios
        int profitableWeeks = weeklyProfits.Count(wp => wp.Value > 0);
        int totalWeeks = weeklyProfits.Count;
        double profitableWeeksPercentage = (double)profitableWeeks / totalWeeks * 100;

        int profitableMonths = monthlyProfits.Count(mp => mp.Value > 0);
        int totalMonths = monthlyProfits.Count;
        double profitableMonthsPercentage = (double)profitableMonths / totalMonths * 100;

        // Output Summary
        Console.WriteLine("\n=== PERFORMANCE SUMMARY ===");
        Console.WriteLine($"Total Trades: {totalTrades}");
        Console.WriteLine($"Winning/Losing Trades: {winningTrades}/{losingTrades}");
        Console.WriteLine($"Win Rate: {winRate:F2}%");
        Console.WriteLine($"Profit Factor: {profitFactor:F2}");
        Console.WriteLine($"Total Profit: {totalProfit:F2}");
        Console.WriteLine($"Average Profit per Trade: {averageProfit:F2}");
        Console.WriteLine($"Largest Win: {maxProfit:F2}");
        Console.WriteLine($"Largest Loss: {maxLoss:F2}");
        Console.WriteLine($"Max Win Streak: {maxWinStreak}");
        Console.WriteLine($"Max Lose Streak: {maxLoseStreak}");

        Console.WriteLine("\n=== TIME-BASED ANALYSIS ===");
        Console.WriteLine($"Best Day: {dailyProfits.OrderByDescending(x => x.Value).First().Key:yyyy-MM-dd} ({dailyProfits.Max(x => x.Value):F2})");
        Console.WriteLine($"Worst Day: {dailyProfits.OrderBy(x => x.Value).First().Key:yyyy-MM-dd} ({dailyProfits.Min(x => x.Value):F2})");
        Console.WriteLine($"Profitable Weeks: {profitableWeeks}/{totalWeeks} ({profitableWeeksPercentage:F2}%)");
        Console.WriteLine($"Profitable Months: {profitableMonths}/{totalMonths} ({profitableMonthsPercentage:F2}%)");

        // Detailed Breakdowns
        Console.WriteLine("\n=== DAILY BREAKDOWN ===");
        foreach (var dp in dailyProfits.OrderByDescending(x => x.Key))
        {
            Console.WriteLine($"{dp.Key:yyyy-MM-dd}: {dp.Value:F2}");
        }

        Console.WriteLine("\n=== WEEKLY BREAKDOWN ===");
        foreach (var wp in weeklyProfits.OrderByDescending(x => x.Key))
        {
            Console.WriteLine($"Week {wp.Key}: {wp.Value:F2}");
        }

        Console.WriteLine("\n=== MONTHLY BREAKDOWN ===");
        foreach (var mp in monthlyProfits.OrderByDescending(x => x.Key))
        {
            Console.WriteLine($"{mp.Key}: {mp.Value:F2}");
        }
    }

    private static void SaveOptimizationResults(double bestProfit, DefaultSettings settings)
    {
        string filePath = "OptimizationResults.txt";
        string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        using (StreamWriter writer = new StreamWriter(filePath, true))
        {
            writer.WriteLine("=================================================");
            writer.WriteLine($"Optimization Results - {timestamp}");
            writer.WriteLine("=================================================");
            writer.WriteLine($"Best Profit: ${bestProfit:F2}");

            var strategies = new Dictionary<string, Strategy>
        {
            { "AboveEmaLong1", settings.AboveEmaLong1 },
            { "AboveEmaLong2", settings.AboveEmaLong2 },
            { "AboveEmaShort1", settings.AboveEmaShort1 },
            { "AboveEmaShort2", settings.AboveEmaShort2 },
            { "BelowEmaLong1", settings.BelowEmaLong1 },
            { "BelowEmaLong2", settings.BelowEmaLong2 },
            { "BelowEmaShort1", settings.BelowEmaShort1 },
            { "BelowEmaShort2", settings.BelowEmaShort2 }
        };

            foreach (var strategyPair in strategies)
            {
                writer.WriteLine("\n-------------------------------------------------");
                writer.WriteLine($"Strategy: {strategyPair.Key}");
                writer.WriteLine("-------------------------------------------------");

                var strategy = strategyPair.Value;

                // CCI Settings
                writer.WriteLine("\nCCI Settings:");
                writer.WriteLine($"  Indicator 1: {strategy.CciIndicator1} {strategy.Cci1Operator} {strategy.Cci1Threshold}");
                writer.WriteLine($"  Indicator 2: {strategy.CciIndicator2} {strategy.Cci2Operator} {strategy.Cci2Threshold}");

                // MACD Settings
                writer.WriteLine("\nMACD Settings:");
                writer.WriteLine($"  Indicator 1: {strategy.MacdIndicator1Line} {strategy.Macd1Operator} {strategy.Macd1Threshold}");
                writer.WriteLine($"  Indicator 2: {strategy.MacdIndicator2Line} {strategy.Macd2Operator} {strategy.Macd2Threshold}");

                // Risk Management Settings
                writer.WriteLine("\nRisk Management:");
                writer.WriteLine($"  ATR Indicator: {strategy.AtrIndicator}");
                writer.WriteLine($"  Trail Stop Multiplier: {strategy.TrailStopMultiplier}x");
                writer.WriteLine($"  Profit Target Multiplier: {strategy.ProfitTargetMultiplier}x");

                // Complete Condition String
                writer.WriteLine("\nComplete Strategy Condition:");
                writer.WriteLine($"  IF ({strategy.CciIndicator1} {strategy.Cci1Operator} {strategy.Cci1Threshold} AND");
                writer.WriteLine($"      {strategy.CciIndicator2} {strategy.Cci2Operator} {strategy.Cci2Threshold} AND");
                writer.WriteLine($"      {strategy.MacdIndicator1Line} {strategy.Macd1Operator} {strategy.Macd1Threshold} AND");
                writer.WriteLine($"      {strategy.MacdIndicator2Line} {strategy.Macd2Operator} {strategy.Macd2Threshold})");
                writer.WriteLine($"  THEN ENTER {strategyPair.Key}");
            }

            writer.WriteLine("\n=================================================\n");
        }
    }

    private static void SaveDefaultValuesResults(double result, DefaultSettings settings)
    {
        string filePath = "DefaultValuesResults.txt";
        string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        using (StreamWriter writer = new StreamWriter(filePath, true))
        {
            writer.WriteLine("=================================================");
            writer.WriteLine($"Default Strategy Results - {timestamp}");
            writer.WriteLine("=================================================");
            writer.WriteLine($"Backtest Result: ${result:F2}");

            var strategies = new Dictionary<string, Strategy>
        {
            { "AboveEmaLong1", settings.AboveEmaLong1 },
            { "AboveEmaLong2", settings.AboveEmaLong2 },
            { "AboveEmaShort1", settings.AboveEmaShort1 },
            { "AboveEmaShort2", settings.AboveEmaShort2 },
            { "BelowEmaLong1", settings.BelowEmaLong1 },
            { "BelowEmaLong2", settings.BelowEmaLong2 },
            { "BelowEmaShort1", settings.BelowEmaShort1 },
            { "BelowEmaShort2", settings.BelowEmaShort2 }
        };

            foreach (var strategyPair in strategies)
            {
                writer.WriteLine("\n-------------------------------------------------");
                writer.WriteLine($"Strategy: {strategyPair.Key}");
                writer.WriteLine("-------------------------------------------------");

                var strategy = strategyPair.Value;

                // CCI Settings
                writer.WriteLine("\nCCI Settings:");
                writer.WriteLine($"  Indicator 1: {strategy.CciIndicator1} {strategy.Cci1Operator} {strategy.Cci1Threshold}");
                writer.WriteLine($"  Indicator 2: {strategy.CciIndicator2} {strategy.Cci2Operator} {strategy.Cci2Threshold}");

                // MACD Settings
                writer.WriteLine("\nMACD Settings:");
                writer.WriteLine($"  Indicator 1: {strategy.MacdIndicator1Line} {strategy.Macd1Operator} {strategy.Macd1Threshold}");
                writer.WriteLine($"  Indicator 2: {strategy.MacdIndicator2Line} {strategy.Macd2Operator} {strategy.Macd2Threshold}");

                // Risk Management Settings
                writer.WriteLine("\nRisk Management:");
                writer.WriteLine($"  ATR Indicator: {strategy.AtrIndicator}");
                writer.WriteLine($"  Trail Stop Multiplier: {strategy.TrailStopMultiplier}x");
                writer.WriteLine($"  Profit Target Multiplier: {strategy.ProfitTargetMultiplier}x");

                // Complete Condition String
                writer.WriteLine("\nComplete Strategy Condition:");
                writer.WriteLine($"  IF ({strategy.CciIndicator1} {strategy.Cci1Operator} {strategy.Cci1Threshold} AND");
                writer.WriteLine($"      {strategy.CciIndicator2} {strategy.Cci2Operator} {strategy.Cci2Threshold} AND");
                writer.WriteLine($"      {strategy.MacdIndicator1Line} {strategy.Macd1Operator} {strategy.Macd1Threshold} AND");
                writer.WriteLine($"      {strategy.MacdIndicator2Line} {strategy.Macd2Operator} {strategy.Macd2Threshold})");
                writer.WriteLine($"  THEN ENTER {strategyPair.Key}");
            }

            writer.WriteLine("\n=================================================\n");
        }
    }

}
