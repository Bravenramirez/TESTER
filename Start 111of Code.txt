using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

public class Strategy
{
    // Properties for CCI, MACD indicators, thresholds, operators, and ATR-based settings
    public required string CciIndicator1 { get; set; }
    public required string CciIndicator2 { get; set; }
    public required string MacdIndicator1 { get; set; }
    public required string MacdIndicator2 { get; set; }
    public required string AtrIndicator { get; set; }
    public double Cci1Threshold { get; set; }
    public double Cci2Threshold { get; set; }
    public double Macd1Threshold { get; set; }
    public double Macd2Threshold { get; set; }
    public required string Cci1Operator { get; set; }
    public required string Cci2Operator { get; set; }
    public required string Macd1Operator { get; set; }
    public required string Macd2Operator { get; set; }
    public double TrailStopMultiplier { get; set; }
    public double ProfitTargetMultiplier { get; set; }
}

public class DefaultSettings
{
    // Define eight default strategies with specific conditions for above and below EMA
    public Strategy AboveEmaLong1 { get; set; }
    public Strategy AboveEmaLong2 { get; set; }
    public Strategy AboveEmaShort1 { get; set; }
    public Strategy AboveEmaShort2 { get; set; }
    public Strategy BelowEmaLong1 { get; set; }
    public Strategy BelowEmaLong2 { get; set; }
    public Strategy BelowEmaShort1 { get; set; }
    public Strategy BelowEmaShort2 { get; set; }

    public DefaultSettings()
    {
        // Initialize each strategy with settings that should allow entry every day
        AboveEmaLong1 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000, // Very loose to ensure entry
            Cci2Threshold = -1000, // Very loose to ensure entry
            Macd1Threshold = -5,   // Very loose to ensure entry
            Macd2Threshold = -5,   // Very loose to ensure entry
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        AboveEmaLong2 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000, // Very loose to ensure entry
            Cci2Threshold = -1000, // Very loose to ensure entry
            Macd1Threshold = -5,   // Very loose to ensure entry
            Macd2Threshold = -5,   // Very loose to ensure entry
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        AboveEmaShort1 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000, // Very loose to ensure entry
            Cci2Threshold = 1000, // Very loose to ensure entry
            Macd1Threshold = 5,   // Very loose to ensure entry
            Macd2Threshold = 5,   // Very loose to ensure entry
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        AboveEmaShort2 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000, // Very loose to ensure entry
            Cci2Threshold = 1000, // Very loose to ensure entry
            Macd1Threshold = 5,   // Very loose to ensure entry
            Macd2Threshold = 5,   // Very loose to ensure entry
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        BelowEmaLong1 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000, // Very loose to ensure entry
            Cci2Threshold = -1000, // Very loose to ensure entry
            Macd1Threshold = -5,   // Very loose to ensure entry
            Macd2Threshold = -5,   // Very loose to ensure entry
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        BelowEmaLong2 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = -1000, // Very loose to ensure entry
            Cci2Threshold = -1000, // Very loose to ensure entry
            Macd1Threshold = -5,   // Very loose to ensure entry
            Macd2Threshold = -5,   // Very loose to ensure entry
            Cci1Operator = ">",
            Cci2Operator = ">",
            Macd1Operator = ">",
            Macd2Operator = ">",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        BelowEmaShort1 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000, // Very loose to ensure entry
            Cci2Threshold = 1000, // Very loose to ensure entry
            Macd1Threshold = 5,   // Very loose to ensure entry
            Macd2Threshold = 5,   // Very loose to ensure entry
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };

        BelowEmaShort2 = new Strategy
        {
            CciIndicator1 = "CCI_50",
            CciIndicator2 = "CCI_100",
            MacdIndicator1 = "MACD_12_26",
            MacdIndicator2 = "MACD_9_18",
            AtrIndicator = "ATR_14",
            Cci1Threshold = 1000, // Very loose to ensure entry
            Cci2Threshold = 1000, // Very loose to ensure entry
            Macd1Threshold = 5,   // Very loose to ensure entry
            Macd2Threshold = 5,   // Very loose to ensure entry
            Cci1Operator = "<",
            Cci2Operator = "<",
            Macd1Operator = "<",
            Macd2Operator = "<",
            TrailStopMultiplier = 2.0, // Example value
            ProfitTargetMultiplier = 2.0 // Example value
        };
    }
}
public class SimpleDailyBacktest
{
    private static void PrintStrategySummary(DefaultSettings settings)
    {
        void PrintStrategyDetails(string name, Strategy strategy)
        {
            Console.WriteLine($"{name}:");
            Console.WriteLine($"  CCI Indicator 1: {strategy.CciIndicator1}, Threshold: {strategy.Cci1Threshold}, Operator: {strategy.Cci1Operator}");
            Console.WriteLine($"  CCI Indicator 2: {strategy.CciIndicator2}, Threshold: {strategy.Cci2Threshold}, Operator: {strategy.Cci2Operator}");
            Console.WriteLine($"  MACD Indicator 1: {strategy.MacdIndicator1}, Threshold: {strategy.Macd1Threshold}, Operator: {strategy.Macd1Operator}");
            Console.WriteLine($"  MACD Indicator 2: {strategy.MacdIndicator2}, Threshold: {strategy.Macd2Threshold}, Operator: {strategy.Macd2Operator}");
            Console.WriteLine($"  ATR Indicator: {strategy.AtrIndicator}");
            Console.WriteLine($"  Trail Stop Multiplier: {strategy.TrailStopMultiplier}");
            Console.WriteLine($"  Profit Target Multiplier: {strategy.ProfitTargetMultiplier}");
            Console.WriteLine();
        }

        PrintStrategyDetails("AboveEmaLong1", settings.AboveEmaLong1);
        PrintStrategyDetails("AboveEmaLong2", settings.AboveEmaLong2);
        PrintStrategyDetails("AboveEmaShort1", settings.AboveEmaShort1);
        PrintStrategyDetails("AboveEmaShort2", settings.AboveEmaShort2);
        PrintStrategyDetails("BelowEmaLong1", settings.BelowEmaLong1);
        PrintStrategyDetails("BelowEmaLong2", settings.BelowEmaLong2);
        PrintStrategyDetails("BelowEmaShort1", settings.BelowEmaShort1);
        PrintStrategyDetails("BelowEmaShort2", settings.BelowEmaShort2);
    }

    public static void Main()
    {
        try
        {
            // Load default settings and prompt user for optimization mode
            var defaults = new DefaultSettings();
            Console.WriteLine("Use default settings? (YES/NO):");
            bool useDefaults = Console.ReadLine()?.Trim().ToUpper() == "YES";

            // Print strategy summary if using defaults
            if (useDefaults)
            {
                PrintStrategySummary(defaults);
            }

            // Load data and parse indicators from CSV file (BacktestData.csv)
            string[] headers = File.ReadLines("BacktestData.csv").First().Split(',');
            var data = LoadData("BacktestData.csv", headers);

            // Run backtest either in default mode or optimization mode
            RunBacktest(useDefaults, defaults, headers, data);

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }

    private static List<Dictionary<string, double>> LoadData(string filePath, string[] headers)
    {
        var data = new List<Dictionary<string, double>>();
        try
        {
            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines.Skip(1))
            {
                var values = line.Split(',');
                var indicators = new Dictionary<string, double>();
                for (int i = 0; i < headers.Length; i++)
                {
                    string header = headers[i];
                    if (header != "DateTime" && header != "Open" && header != "High" && header != "Low" && header != "Close" && header != "Volume")
                    {
                        if (double.TryParse(values[i], NumberStyles.Any, CultureInfo.InvariantCulture, out double result))
                        {
                            indicators[header] = result;
                        }
                    }
                    else if (header == "DateTime")
                    {
                        indicators[header] = DateTime.Parse(values[i], CultureInfo.InvariantCulture).ToOADate();
                    }
                }
                data.Add(indicators);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading data: {ex.Message}");
        }
        return data;
    }

    private static void RunBacktest(bool useDefaults, DefaultSettings defaults, string[] headers, List<Dictionary<string, double>> data)
    {
        try
        {
            if (useDefaults)
            {
                double result = PerformBacktest(data, defaults);
                SaveDefaultValuesResults(result, defaults);
            }
            else
            {
                var bestProfit = RunOptimization(data, headers, defaults);
                SaveOptimizationResults(bestProfit, defaults);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred during backtesting: {ex.Message}");
        }
    }

    private static double PerformBacktest(List<Dictionary<string, double>> data, DefaultSettings settings)
    {
        var openTrades = new Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)>();
        var closedTrades = new Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)>();
        bool tradeOpen = false;

        for (int i = 0; i < data.Count; i++)
        {
            var line = data[i];
            var dateTime = DateTime.FromOADate(line["DateTime"]);
            var closePrice = line["Close"];
            var atrValue = line["ATR_14"];

            if (!line.ContainsKey("CCI20") || !line.ContainsKey("CCI50") || !line.ContainsKey("MACD_12_26_9") || !line.ContainsKey("MACD_19_39_9") || !line.ContainsKey("EMA200"))
            {
                Console.WriteLine($"Missing key(s) in line at index {i}");
                continue;
            }

            var indicators = new Dictionary<string, double>
        {
            { "CCI20", line["CCI20"] },
            { "CCI50", line["CCI50"] },
            { "MACD_12_26_9", line["MACD_12_26_9"] },
            { "MACD_19_39_9", line["MACD_19_39_9"] },
            { "EMA200", line["EMA200"] }
        };

            if (i % 2 == 0) // Print every other line
            {
                PrintIndicatorValues(dateTime, closePrice, indicators, settings);
            }

            if (indicators["EMA200"] < closePrice)
            {
                if (!tradeOpen)
                {
                    tradeOpen = ApplyStrategy(settings.AboveEmaLong1, dateTime, closePrice, atrValue, indicators, openTrades, "Long") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.AboveEmaLong2, dateTime, closePrice, atrValue, indicators, openTrades, "Long") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.AboveEmaShort1, dateTime, closePrice, atrValue, indicators, openTrades, "Short") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.AboveEmaShort2, dateTime, closePrice, atrValue, indicators, openTrades, "Short") || tradeOpen;
                }
            }
            else
            {
                if (!tradeOpen)
                {
                    tradeOpen = ApplyStrategy(settings.BelowEmaLong1, dateTime, closePrice, atrValue, indicators, openTrades, "Long") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.BelowEmaLong2, dateTime, closePrice, atrValue, indicators, openTrades, "Long") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.BelowEmaShort1, dateTime, closePrice, atrValue, indicators, openTrades, "Short") || tradeOpen;
                    tradeOpen = ApplyStrategy(settings.BelowEmaShort2, dateTime, closePrice, atrValue, indicators, openTrades, "Short") || tradeOpen;
                }
            }

            ManageExits(openTrades, dateTime, closePrice, atrValue, ref tradeOpen);

            if (dateTime.TimeOfDay >= new TimeSpan(15, 55, 0)) // Reset at the end of the trading day
            {
                tradeOpen = false;
            }
        }

        return CalculateResults(closedTrades);
    }

    private static void PrintIndicatorValues(DateTime dateTime, double closePrice, Dictionary<string, double> indicators, DefaultSettings settings)
    {
        Console.WriteLine($"Date: {dateTime:yyyy-MM-dd}, Time: {dateTime:HH:mm:ss}, Close Price: {closePrice:F2}");

        var strategies = new Dictionary<string, Strategy>
    {
        { "AboveEmaLong1", settings.AboveEmaLong1 },
        { "AboveEmaLong2", settings.AboveEmaLong2 },
        { "AboveEmaShort1", settings.AboveEmaShort1 },
        { "AboveEmaShort2", settings.AboveEmaShort2 },
        { "BelowEmaLong1", settings.BelowEmaLong1 },
        { "BelowEmaLong2", settings.BelowEmaLong2 },
        { "BelowEmaShort1", settings.BelowEmaShort1 },
        { "BelowEmaShort2", settings.BelowEmaShort2 }
    };

        foreach (var strategyPair in strategies)
        {
            var strategy = strategyPair.Value;
            Console.WriteLine($"Strategy: {strategyPair.Key}");
            Console.WriteLine($"  CCI Indicator 1: {strategy.CciIndicator1}, Actual Value: {indicators[strategy.CciIndicator1]}, Criteria: {strategy.Cci1Operator} {strategy.Cci1Threshold}");
            Console.WriteLine($"  CCI Indicator 2: {strategy.CciIndicator2}, Actual Value: {indicators[strategy.CciIndicator2]}, Criteria: {strategy.Cci2Operator} {strategy.Cci2Threshold}");
            Console.WriteLine($"  MACD Indicator 1: {strategy.MacdIndicator1}, Actual Value: {indicators[strategy.MacdIndicator1]}, Criteria: {strategy.Macd1Operator} {strategy.Macd1Threshold}");
            Console.WriteLine($"  MACD Indicator 2: {strategy.MacdIndicator2}, Actual Value: {indicators[strategy.MacdIndicator2]}, Criteria: {strategy.Macd2Operator} {strategy.Macd2Threshold}");
            Console.WriteLine($"  ATR Indicator: {strategy.AtrIndicator}, Actual Value: {indicators[strategy.AtrIndicator]}");
        }
    }

    private static bool ApplyStrategy(Strategy strategy, DateTime dateTime, double closePrice, double atrValue, Dictionary<string, double> indicators, Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades, string positionType)
    {
        if (CheckEntryConditions(strategy, indicators) && dateTime.TimeOfDay == new TimeSpan(9, 30, 0))
        {
            var entryPrice = closePrice;
            var trailStop = closePrice - atrValue * strategy.TrailStopMultiplier;
            var targetProfit = closePrice + atrValue * strategy.ProfitTargetMultiplier;

            if (positionType == "Short")
            {
                trailStop = closePrice + atrValue * strategy.TrailStopMultiplier;
                targetProfit = closePrice - atrValue * strategy.ProfitTargetMultiplier;
            }

            openTrades[dateTime] = (entryPrice, positionType, trailStop, targetProfit);
            LogTrade(dateTime, dateTime, entryPrice, entryPrice, positionType, 0);
            return true; // Trade opened
        }
        return false; // No trade opened
    }

    private static double RunOptimization(List<Dictionary<string, double>> data, string[] headers, DefaultSettings defaults)
    {
        var bestProfit = double.MinValue;
        var bestSettings = new DefaultSettings();
        var startTime = DateTime.Now;
        var timeout = TimeSpan.FromMinutes(5); // Set a timeout duration

        Console.WriteLine("Optimization running. Press any key to stop...");

        while (!Console.KeyAvailable && DateTime.Now - startTime < timeout)
        {
            RandomizeStrategySettings(defaults);
            var result = PerformBacktest(data, defaults);

            Console.WriteLine($"Current Profit: {result}");

            if (result > bestProfit)
            {
                bestProfit = result;
                bestSettings = new DefaultSettings
                {
                    AboveEmaLong1 = defaults.AboveEmaLong1,
                    AboveEmaLong2 = defaults.AboveEmaLong2,
                    AboveEmaShort1 = defaults.AboveEmaShort1,
                    AboveEmaShort2 = defaults.AboveEmaShort2,
                    BelowEmaLong1 = defaults.BelowEmaLong1,
                    BelowEmaLong2 = defaults.BelowEmaLong2,
                    BelowEmaShort1 = defaults.BelowEmaShort1,
                    BelowEmaShort2 = defaults.BelowEmaShort2
                };

                Console.WriteLine("New Best Profit Found!");
            }
        }

        Console.WriteLine($"Best Profit: {bestProfit}");
        SaveOptimizationResults(bestProfit, bestSettings);
        return bestProfit;
    }

    private static void RandomizeStrategySettings(DefaultSettings settings)
    {
        var random = new Random();

        // Define possible values for randomization with logical ranges
        string[] cciIndicators = { "CCI_50", "CCI_100", "CCI_200" };
        string[] macdIndicators = { "MACD_12_26", "MACD_9_18", "MACD_24_52" };
        string[] operators = { ">", "<" };
        double[] atrMultipliers = { 1.5, 2.0, 2.5, 3.0 }; // Logical range for ATR multipliers
        double[] cciThresholds = { -200, -100, 0, 100, 200 }; // Logical range for CCI thresholds
        double[] macdThresholds = { -2, -1, 0, 1, 2 }; // Logical range for MACD thresholds

        // Randomize settings for all strategies
        var strategies = new[]
        {
        settings.AboveEmaLong1, settings.AboveEmaLong2, settings.AboveEmaShort1, settings.AboveEmaShort2,
        settings.BelowEmaLong1, settings.BelowEmaLong2, settings.BelowEmaShort1, settings.BelowEmaShort2
    };

        foreach (var strategy in strategies)
        {
            strategy.CciIndicator1 = cciIndicators[random.Next(cciIndicators.Length)];
            strategy.CciIndicator2 = cciIndicators[random.Next(cciIndicators.Length)];
            strategy.MacdIndicator1 = macdIndicators[random.Next(macdIndicators.Length)];
            strategy.MacdIndicator2 = macdIndicators[random.Next(macdIndicators.Length)];
            strategy.Cci1Operator = operators[random.Next(operators.Length)];
            strategy.Cci2Operator = operators[random.Next(operators.Length)];
            strategy.Macd1Operator = operators[random.Next(operators.Length)];
            strategy.Macd2Operator = operators[random.Next(operators.Length)];
            strategy.TrailStopMultiplier = atrMultipliers[random.Next(atrMultipliers.Length)];
            strategy.ProfitTargetMultiplier = atrMultipliers[random.Next(atrMultipliers.Length)];
            strategy.Cci1Threshold = cciThresholds[random.Next(cciThresholds.Length)];
            strategy.Cci2Threshold = cciThresholds[random.Next(cciThresholds.Length)];
            strategy.Macd1Threshold = macdThresholds[random.Next(macdThresholds.Length)];
            strategy.Macd2Threshold = macdThresholds[random.Next(macdThresholds.Length)];
        }
    }

    private static bool CheckEntryConditions(Strategy strategy, Dictionary<string, double> indicators)
    {
        bool indicatorsExist = indicators.ContainsKey(strategy.CciIndicator1) &&
                               indicators.ContainsKey(strategy.CciIndicator2) &&
                               indicators.ContainsKey(strategy.MacdIndicator1) &&
                               indicators.ContainsKey(strategy.MacdIndicator2);

        if (!indicatorsExist) return false;

        bool cci1Condition = EvaluateCondition(indicators[strategy.CciIndicator1], strategy.Cci1Threshold, strategy.Cci1Operator);
        bool cci2Condition = EvaluateCondition(indicators[strategy.CciIndicator2], strategy.Cci2Threshold, strategy.Cci2Operator);
        bool macd1Condition = EvaluateCondition(indicators[strategy.MacdIndicator1], strategy.Macd1Threshold, strategy.Macd1Operator);
        bool macd2Condition = EvaluateCondition(indicators[strategy.MacdIndicator2], strategy.Macd2Threshold, strategy.Macd2Operator);

        return cci1Condition && cci2Condition && macd1Condition && macd2Condition;
    }

    private static bool EvaluateCondition(double indicatorValue, double threshold, string op)
    {
        return op switch
        {
            ">" => indicatorValue > threshold,
            "<" => indicatorValue < threshold,
            ">=" => indicatorValue >= threshold,
            "<=" => indicatorValue <= threshold,
            "==" => indicatorValue == threshold,
            "!=" => indicatorValue != threshold,
            _ => throw new ArgumentException($"Invalid operator: {op}")
        };
    }

    private static void ManageExits(Dictionary<DateTime, (double EntryPrice, string PositionType, double TrailStop, double TargetProfit)> openTrades, DateTime dateTime, double closePrice, double atrValue, ref bool tradeOpen)
    {
        var exitTime = new TimeSpan(15, 55, 0); // 3:55 PM

        foreach (var trade in openTrades.ToList())
        {
            var (entryPrice, positionType, trailStop, targetProfit) = trade.Value;

            bool exitConditionMet = positionType switch
            {
                "Long" => closePrice <= trailStop || closePrice >= targetProfit,
                "Short" => closePrice >= trailStop || closePrice <= targetProfit,
                _ => false
            };

            if (exitConditionMet || dateTime.TimeOfDay >= exitTime)
            {
                double exitPrice = closePrice;
                double profit = positionType == "Long" ? exitPrice - entryPrice : entryPrice - exitPrice;
                LogTrade(trade.Key, dateTime, entryPrice, exitPrice, positionType, profit);
                openTrades.Remove(trade.Key);
                tradeOpen = false; // Reset tradeOpen flag
            }
        }
    }

    private static void LogTrade(DateTime entryDate, DateTime exitDate, double entryPrice, double exitPrice, string positionType, double profit)
    {
        string logFilePath = "TradeLog.txt";
        string logEntry = $"{entryDate:yyyy-MM-dd HH:mm:ss},{exitDate:yyyy-MM-dd HH:mm:ss},{entryPrice:F2},{exitPrice:F2},{positionType},{profit:F2}";

        using (StreamWriter writer = new StreamWriter(logFilePath, true))
        {
            writer.WriteLine(logEntry);
        }
    }

    private static double CalculateResults(Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)> trades)
    {
        double totalProfit = 0;
        var dailyProfits = new Dictionary<DateTime, double>();
        var weeklyProfits = new Dictionary<int, double>();
        var monthlyProfits = new Dictionary<string, double>();

        foreach (var trade in trades)
        {
            DateTime entryDate = trade.Key;
            double profit = trade.Value.PositionType == "Long" ? trade.Value.ExitPrice - trade.Value.EntryPrice : trade.Value.EntryPrice - trade.Value.ExitPrice;

            // Calculate total profit
            totalProfit += profit;

            // Calculate daily profits
            if (!dailyProfits.ContainsKey(entryDate.Date))
            {
                dailyProfits[entryDate.Date] = 0;
            }
            dailyProfits[entryDate.Date] += profit;

            // Calculate weekly profits
            int weekOfYear = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(entryDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            if (!weeklyProfits.ContainsKey(weekOfYear))
            {
                weeklyProfits[weekOfYear] = 0;
            }
            weeklyProfits[weekOfYear] += profit;

            // Calculate monthly profits
            string monthYear = entryDate.ToString("yyyy-MM");
            if (!monthlyProfits.ContainsKey(monthYear))
            {
                monthlyProfits[monthYear] = 0;
            }
            monthlyProfits[monthYear] += profit;
        }

        // Log summary statistics
        Console.WriteLine("Total Profit: " + totalProfit);
        Console.WriteLine("Daily Profits: " + string.Join(", ", dailyProfits.Select(kvp => $"{kvp.Key:yyyy-MM-dd}: {kvp.Value:F2}")));
        Console.WriteLine("Weekly Profits: " + string.Join(", ", weeklyProfits.Select(kvp => $"Week {kvp.Key}: {kvp.Value:F2}")));
        Console.WriteLine("Monthly Profits: " + string.Join(", ", monthlyProfits.Select(kvp => $"{kvp.Key}: {kvp.Value:F2}")));

        return totalProfit;
    }

    private static void GenerateSummary(Dictionary<DateTime, (double EntryPrice, double ExitPrice, string PositionType)> trades)
    {
        int totalTrades = trades.Count;
        int winningTrades = trades.Count(t => (t.Value.PositionType == "Long" && t.Value.ExitPrice > t.Value.EntryPrice) || (t.Value.PositionType == "Short" && t.Value.ExitPrice < t.Value.EntryPrice));
        int losingTrades = totalTrades - winningTrades;
        double winRate = (double)winningTrades / totalTrades * 100;
        double totalProfit = trades.Sum(t => (t.Value.PositionType == "Long" ? t.Value.ExitPrice - t.Value.EntryPrice : t.Value.EntryPrice - t.Value.ExitPrice));

        var dailyProfits = new Dictionary<DateTime, double>();
        var weeklyProfits = new Dictionary<int, double>();
        var monthlyProfits = new Dictionary<string, double>();

        foreach (var trade in trades)
        {
            DateTime entryDate = trade.Key;
            double profit = trade.Value.PositionType == "Long" ? trade.Value.ExitPrice - trade.Value.EntryPrice : trade.Value.EntryPrice - trade.Value.ExitPrice;

            // Calculate daily profits
            if (!dailyProfits.ContainsKey(entryDate.Date))
            {
                dailyProfits[entryDate.Date] = 0;
            }
            dailyProfits[entryDate.Date] += profit;

            // Calculate weekly profits
            int weekOfYear = CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(entryDate, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
            if (!weeklyProfits.ContainsKey(weekOfYear))
            {
                weeklyProfits[weekOfYear] = 0;
            }
            weeklyProfits[weekOfYear] += profit;

            // Calculate monthly profits
            string monthYear = entryDate.ToString("yyyy-MM");
            if (!monthlyProfits.ContainsKey(monthYear))
            {
                monthlyProfits[monthYear] = 0;
            }
            monthlyProfits[monthYear] += profit;
        }

        int profitableWeeks = weeklyProfits.Count(wp => wp.Value > 0);
        int totalWeeks = weeklyProfits.Count;
        double profitableWeeksPercentage = (double)profitableWeeks / totalWeeks * 100;

        int profitableMonths = monthlyProfits.Count(mp => mp.Value > 0);
        int totalMonths = monthlyProfits.Count;
        double profitableMonthsPercentage = (double)profitableMonths / totalMonths * 100;

        Console.WriteLine("Performance Summary:");
        Console.WriteLine($"Total Trades: {totalTrades}");
        Console.WriteLine($"Winning Trades: {winningTrades}");
        Console.WriteLine($"Losing Trades: {losingTrades}");
        Console.WriteLine($"Win Rate: {winRate:F2}%");
        Console.WriteLine($"Total Profit: {totalProfit:F2}");

        Console.WriteLine("\nDaily Profits:");
        foreach (var dp in dailyProfits)
        {
            Console.WriteLine($"{dp.Key:yyyy-MM-dd}: {dp.Value:F2}");
        }

        Console.WriteLine("\nWeekly Profits:");
        foreach (var wp in weeklyProfits)
        {
            Console.WriteLine($"Week {wp.Key}: {wp.Value:F2}");
        }
        Console.WriteLine($"Profitable Weeks: {profitableWeeks} out of {totalWeeks} ({profitableWeeksPercentage:F2}%)");

        Console.WriteLine("\nMonthly Profits:");
        foreach (var mp in monthlyProfits)
        {
            Console.WriteLine($"{mp.Key}: {mp.Value:F2}");
        }
        Console.WriteLine($"Profitable Months: {profitableMonths} out of {totalMonths} ({profitableMonthsPercentage:F2}%)");
    }

    private static void SaveOptimizationResults(double bestProfit, DefaultSettings settings)
    {
        string filePath = "OptimizationResults.txt";
        using (StreamWriter writer = new StreamWriter(filePath, true))
        {
            writer.WriteLine($"Best Profit: {bestProfit}");
            writer.WriteLine("Best Strategy Settings:");

            var strategies = new Dictionary<string, Strategy>
        {
            { "AboveEmaLong1", settings.AboveEmaLong1 },
            { "AboveEmaLong2", settings.AboveEmaLong2 },
            { "AboveEmaShort1", settings.AboveEmaShort1 },
            { "AboveEmaShort2", settings.AboveEmaShort2 },
            { "BelowEmaLong1", settings.BelowEmaLong1 },
            { "BelowEmaLong2", settings.BelowEmaLong2 },
            { "BelowEmaShort1", settings.BelowEmaShort1 },
            { "BelowEmaShort2", settings.BelowEmaShort2 }
        };

            foreach (var strategyPair in strategies)
            {
                writer.WriteLine($"Strategy: {strategyPair.Key}");
                var strategy = strategyPair.Value;
                writer.WriteLine($"CCI Indicator 1: {strategy.CciIndicator1}");
                writer.WriteLine($"CCI Indicator 2: {strategy.CciIndicator2}");
                writer.WriteLine($"MACD Indicator 1: {strategy.MacdIndicator1}");
                writer.WriteLine($"MACD Indicator 2: {strategy.MacdIndicator2}");
                writer.WriteLine($"ATR Indicator: {strategy.AtrIndicator}");
                writer.WriteLine($"CCI 1 Threshold: {strategy.Cci1Threshold}");
                writer.WriteLine($"CCI 2 Threshold: {strategy.Cci2Threshold}");
                writer.WriteLine($"MACD 1 Threshold: {strategy.Macd1Threshold}");
                writer.WriteLine($"MACD 2 Threshold: {strategy.Macd2Threshold}");
                writer.WriteLine($"CCI 1 Operator: {strategy.Cci1Operator}");
                writer.WriteLine($"CCI 2 Operator: {strategy.Cci2Operator}");
                writer.WriteLine($"MACD 1 Operator: {strategy.Macd1Operator}");
                writer.WriteLine($"MACD 2 Operator: {strategy.Macd2Operator}");
                writer.WriteLine($"Trail Stop Multiplier: {strategy.TrailStopMultiplier}");
                writer.WriteLine($"Profit Target Multiplier: {strategy.ProfitTargetMultiplier}");
                writer.WriteLine();
            }
        }
    }

    private static void SaveDefaultValuesResults(double result, DefaultSettings settings)
    {
        string filePath = "DefaultValuesResults.txt";
        using (StreamWriter writer = new StreamWriter(filePath, true))
        {
            writer.WriteLine($"Backtest Result: {result}");
            writer.WriteLine("Default Settings:");

            var strategies = new Dictionary<string, Strategy>
        {
            { "AboveEmaLong1", settings.AboveEmaLong1 },
            { "AboveEmaLong2", settings.AboveEmaLong2 },
            { "AboveEmaShort1", settings.AboveEmaShort1 },
            { "AboveEmaShort2", settings.AboveEmaShort2 },
            { "BelowEmaLong1", settings.BelowEmaLong1 },
            { "BelowEmaLong2", settings.BelowEmaLong2 },
            { "BelowEmaShort1", settings.BelowEmaShort1 },
            { "BelowEmaShort2", settings.BelowEmaShort2 }
        };

            foreach (var strategyPair in strategies)
            {
                writer.WriteLine($"Strategy: {strategyPair.Key}");
                var strategy = strategyPair.Value;
                writer.WriteLine($"CCI Indicator 1: {strategy.CciIndicator1}");
                writer.WriteLine($"CCI Indicator 2: {strategy.CciIndicator2}");
                writer.WriteLine($"MACD Indicator 1: {strategy.MacdIndicator1}");
                writer.WriteLine($"MACD Indicator 2: {strategy.MacdIndicator2}");
                writer.WriteLine($"ATR Indicator: {strategy.AtrIndicator}");
                writer.WriteLine($"CCI 1 Threshold: {strategy.Cci1Threshold}");
                writer.WriteLine($"CCI 2 Threshold: {strategy.Cci2Threshold}");
                writer.WriteLine($"MACD 1 Threshold: {strategy.Macd1Threshold}");
                writer.WriteLine($"MACD 2 Threshold: {strategy.Macd2Threshold}");
                writer.WriteLine($"CCI 1 Operator: {strategy.Cci1Operator}");
                writer.WriteLine($"CCI 2 Operator: {strategy.Cci2Operator}");
                writer.WriteLine($"MACD 1 Operator: {strategy.Macd1Operator}");
                writer.WriteLine($"MACD 2 Operator: {strategy.Macd2Operator}");
                writer.WriteLine($"Trail Stop Multiplier: {strategy.TrailStopMultiplier}");
                writer.WriteLine($"Profit Target Multiplier: {strategy.ProfitTargetMultiplier}");
                writer.WriteLine();
            }
        }
    }
}
